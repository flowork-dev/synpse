#######################################################################
# WEBSITE https://flowork.cloud
# File NAME : C:\FLOWORK\flowork-core\tools\article_generator_tools\processor.py JUMLAH BARIS 71 
#######################################################################

from flowork_kernel.api_contract import BaseModule, IExecutable, IDataPreviewer
from flowork_kernel.utils.payload_helper import get_nested_value
from flowork_kernel.api_client import ApiClient
class ArticleGeneratorModule(BaseModule, IExecutable, IDataPreviewer):
    """
    A simple, single-purpose module to generate an article from a prompt using a specific AI provider.
    This is a 'dumb tool' designed to be commanded by an Agent Host.
    (UPGRADED V2) More flexible prompt sourcing.
    """
    TIER = "pro"
    def __init__(self, module_id, services):
        super().__init__(module_id, services)
        self.api_client = ApiClient(kernel=self.kernel)
    def execute(self, payload: dict, config: dict, status_updater, mode='EXECUTE', **kwargs): # ADD CODE
        provider_id = config.get('selected_ai_provider')
        prompt_variable_options = [
            config.get('prompt_source_variable', 'data.prompt_artikel'), # 1. Check the configured variable first
            'data.prompt'                                              # 2. Fallback to the agent's generic key
        ]
        prompt_text = None
        used_variable = None
        for var_option in prompt_variable_options:
            value = get_nested_value(payload, var_option)
            if value and isinstance(value, str):
                prompt_text = value
                used_variable = var_option
                self.logger(f"ArticleGenerator found prompt in '{used_variable}'.", "DEBUG")
                break
        if not provider_id:
            return {"payload": {"data": {"error": "AI Provider/Model has not been selected in the Article Generator properties."}}, "output_name": "error"}
        if not prompt_text:
            return {"payload": {"data": {"error": f"Could not find a valid text prompt in the payload. Checked: {', '.join(prompt_variable_options)}"}}, "output_name": "error"}
        status_updater(f"Sending prompt to '{provider_id}'...", "INFO")
        self.logger(f"ArticleGenerator: Sending prompt from '{used_variable}' to '{provider_id}' for generation.", "INFO")
        ai_manager = self.kernel.get_service("ai_provider_manager_service")
        if not ai_manager:
            return {"payload": {"data": {"error": "AIProviderManagerService is not available."}}, "output_name": "error"}
        try:
            response = ai_manager.query_ai_by_task('text', prompt_text, endpoint_id=provider_id)
            if "error" in response:
                raise Exception(response["error"]) # This will be caught by the generic except block
            article_text = response.get('data')
            if not article_text:
                raise Exception("The AI provider returned an empty response.") # This will be caught
            if 'data' not in payload or not isinstance(payload['data'], dict):
                payload['data'] = {}
            payload['data']['article_text'] = article_text
            status_updater("Article generated successfully.", "SUCCESS")
            return {"payload": payload, "output_name": "success"}
        except Exception as e:
            error_msg = f"Failed to generate article: {e}"
            self.logger(error_msg, "ERROR")
            if 'data' not in payload or not isinstance(payload['data'], dict):
                payload['data'] = {}
            payload['data']['error'] = error_msg
            return {"payload": payload, "output_name": "error"}
    def get_dynamic_output_schema(self, config):
        return [{
            "name": "data.article_text",
            "type": "string",
            "description": "The final article text generated by the AI."
        }]
    def get_data_preview(self, config: dict):
        return [{'status': 'preview_not_available', 'reason': 'AI generation is a live process.'}]
